name: Generate terraform docs
on:
  push:
    branches:
      - main
    paths-ignore:
      - "README.md"
  pull_request:
    branches:
      - main
    paths-ignore:
      - "README.md"

permissions:
  contents: write
  pages: write 
  id-token: write
  pull-requests: write

env:
  PHP: '8.2'
  TFS_STORAGE_ACCOUNT_NAME: "staterraform002"
  TFS_CONTAINER_NAME: "spoke-dev"
  
jobs:
  docs:
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.event.pull_request.head.ref }}

    - name: Render terraform docs and push changes back to PR
      uses: terraform-docs/gh-actions@v1.1.0
      with:
        working-dir: ./
        output-file: README.md
        output-method: inject
        git-push: "true"
        git-push-user-name: "${{ github.actor }}"
 
  # This workflow uses actions that are not certified by GitHub.
  # They are provided by a third-party and are governed by
  # separate terms of service, privacy policy, and support
  # documentation.

  # GitHub recommends pinning actions to a commit SHA.
  # To get a newer version, you will need to update the SHA.
  # You can also reference a tag or branch, but the action may change without warning.


  Plan:
    if: ${{ github.actor != 'dependabot[bot]' }}
    strategy:
      matrix:
        environment:
         - eu-dev
    runs-on: ubuntu-latest
    environment: ${{ matrix.environment }}
    defaults:
      run:
        shell: bash
        working-directory: ./
    env:
      ARM_USE_OIDC: true
      ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
      ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
      ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"
      ARM_USE_AZUREAD: true
      ARM_STORAGE_USE_AZUREAD: true
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: OIDC Login to Azure Public Cloud 
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.ARM_CLIENT_ID }}
        tenant-id: ${{ secrets.ARM_TENANT_ID }}
        subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }} 
        enable-AzPSSession: false

    - uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.8.2"
        terraform_wrapper: false

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check -recursive
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: |
        terraform init \
          -backend-config="key=${{ matrix.environment }}.terraform.tfstate" \
          -backend-config="storage_account_name=${{ env.TFS_STORAGE_ACCOUNT_NAME }}" \
          -backend-config="container_name=${{ env.TFS_CONTAINER_NAME }}"

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: | 
        terraform plan -no-color -var-file="./environments/${{ matrix.environment }}.tfvars" \
        -compact-warnings -out="${{ matrix.environment }}tfplan" 

    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
          })

          // 2. Prepare format of the comment
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }

    - name: Publish Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.environment }}-plan
        path: ${{ matrix.environment }}tfplan

  Apply:
    if: github.ref == 'refs/heads/main'  &&  github.actor != 'dependabot[bot]'
    strategy:
      matrix:
        environment:
          - eu-dev
    runs-on: ubuntu-latest
    needs: [Plan]
    environment: ${{ matrix.environment }}
    defaults:
      run:
        shell: bash
        working-directory: ./
    env:
      ARM_USE_OIDC: true
      ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
      ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
      ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"
      ARM_USE_AZUREAD: true
      ARM_STORAGE_USE_AZUREAD: true

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: OIDC Login to Azure Public Cloud 
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.ARM_CLIENT_ID }}
        tenant-id: ${{ secrets.ARM_TENANT_ID }}
        subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }} 
        enable-AzPSSession: false

    - uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.8.2"
        terraform_wrapper: false

    - name: Terraform Init
      id: init
      run: |
        terraform init \
          -backend-config="key=${{ matrix.environment }}.terraform.tfstate" \
          -backend-config="storage_account_name=${{ env.TFS_STORAGE_ACCOUNT_NAME }}" \
          -backend-config="container_name=${{ env.TFS_CONTAINER_NAME }}"

    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.environment }}-plan

    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false -no-color "${{ matrix.environment }}tfplan" 
